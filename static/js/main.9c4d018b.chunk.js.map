{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["nearestRank","ranks","rank","fRank","undefined","forEach","item","index","portionToTime","waitTimes","ranksText","whenGm","state","hours","role","portion","time","invested","ranked","prevProps","prevState","snapshot","this","setState","newRank","parseInt","timeItTook","avgWr","lastRank","i","Math","abs","push","classes","props","console","log","items","map","key","Typography","gutterBottom","minutes","dt","Date","setMinutes","getMinutes","getDate","getMonth","getFullYear","Container","component","maxWidth","Box","mt","align","className","form","noValidate","FormControl","formControl","TextField","type","id","label","value","onChange","event","target","FormHelperText","InputLabel","Select","labelId","MenuItem","Grid","container","spacing","direction","alignItems","justify","xs","Paper","paper","sm","toFixed","React","Component","withStyles","theme","padding","width","marginTop","margin","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c4d018b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst nearestRank = (ranks, rank) =>\n{\n    let fRank = undefined;\n\n    ranks.forEach((item, index) =>\n    {\n        if (fRank === undefined && item > rank) { fRank = index === 0 ? 0 : index-1;}\n    });\n\n    return fRank;\n};\n\nconst getDate = (minutes) =>\n{\n    let dt = new Date();\n    dt.setMinutes( dt.getMinutes() + minutes );\n    return dt.getDate() + \". \" + (dt.getMonth() + 1) + \". \" + dt.getFullYear();\n};\n\nlet portionToTime = [0, 0.1, 0.25, 0.5, 0.75, 0.85, 1]; // portion of time for this role\nlet waitTimes = [0, 1, 5, 2.5]; // average wait times (lowest possible)\nlet gameTime = 18; // avg game time in mins\nlet ranks = [0, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000];\nlet ranksText = [undefined, 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'top500'];\n\n\nclass whenGm extends React.Component\n{\n    state =\n    {\n        hours: 14,\n        role: 2,\n        portion: 6,\n        time: 2,\n        rank: 2500,\n        invested: 1,\n        ranked: [{time: 50900, rank: 3000}],\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (prevState.portion !== this.state.portion ||\n            prevState.hours !== this.state.hours ||\n            prevState.role !== this.state.role ||\n            prevState.rank !== this.state.rank ||\n            prevState.invested !== this.state.invested)\n        {\n            // sets time for this role and 1 day\n            this.setState({time: this.state.hours * portionToTime[this.state.portion] / 7});\n\n            // every 350 SR is waiting time longer\n            let waitTimePerMatch = 0;\n            let timePerMatch = 0;\n            let newRank = parseInt(this.state.rank);\n            let timeItTook = 0;\n            let ranked = [];\n            let avgWr = parseInt(100 / this.state.invested); // 3 means every 33match is unexpected win, ie 53% winrate\n\n            let lastRank = nearestRank(ranks, this.state.rank);\n\n            // 10000 games\n            let i = 0;\n            for (i = 0; i < 10000; i++)\n            {\n                waitTimePerMatch = waitTimes[this.state.role] * (1 + (Math.abs(2500 - newRank) / 350));\n                timePerMatch = gameTime + waitTimePerMatch;\n                timeItTook += timePerMatch;\n\n                // unexpected win\n                if (i % avgWr === 0)\n                {\n                    newRank += 25;\n                }\n\n                // lose/win every second match\n                newRank += i % 2 === 0 ? 25 : -25;\n                // has ranked?\n                if (newRank > ranks[lastRank+1])\n                {\n                    lastRank++;\n                    ranked.push({time: timeItTook, rank: newRank})\n                }\n\n                if (newRank > 4500)\n                {\n                    break;\n                }\n            }\n\n            this.setState({ranked: ranked});\n        }\n    }\n\n    render()\n    {\n        const { classes } = this.props;\n        console.log(this.state.ranked);\n        const items = this.state.ranked.map((item, key) =>\n            <Typography key={key} gutterBottom>\n                {ranksText[nearestRank(ranks, item.rank)]}: {getDate(item.time/this.state.time*24)}\n            </Typography>\n        );\n\n        return (\n            <Container component=\"main\" maxWidth=\"md\">\n                <Box mt={8} align=\"center\">\n                    <h1>When I will be GM?</h1>\n                </Box>\n\n                <form className={classes.form} noValidate>\n                    <FormControl className={classes.formControl}>\n                        <TextField type=\"number\"\n                                   id=\"hours\"\n                                   label=\"Hours\"\n                                   value={this.state.hours}\n                                   onChange={event => { this.setState({hours: event.target.value });}}\n                        />\n                        <FormHelperText>How many hours do you play per <b>week</b>?</FormHelperText>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"role\">Role</InputLabel>\n                        <Select\n                            labelId=\"role\"\n                            id=\"role\"\n                            value={this.state.role}\n                            onChange={event => { this.setState({role: event.target.value });}}\n                        >\n                            <MenuItem value={1}>Tank</MenuItem>\n                            <MenuItem value={2}>Damage</MenuItem>\n                            <MenuItem value={3}>Support</MenuItem>\n                        </Select>\n                        <FormHelperText>What role do you want to calculate?</FormHelperText>\n                    </FormControl>\n\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"portion\">Onetrick?</InputLabel>\n                        <Select\n                            labelId=\"portion\"\n                            id=\"portion\"\n                            value={this.state.portion}\n                            onChange={event => { this.setState({portion: event.target.value });}}\n                        >\n                            <MenuItem value={1}>One of every ten games</MenuItem>\n                            <MenuItem value={2}>Less than one third</MenuItem>\n                            <MenuItem value={3}>About half of time</MenuItem>\n                            <MenuItem value={4}>Approximately three quarters</MenuItem>\n                            <MenuItem value={5}>Almost exclusively</MenuItem>\n                            <MenuItem value={6}>I am one-tricking this role</MenuItem>\n                        </Select>\n                        <FormHelperText>How much do you play this role?</FormHelperText>\n                    </FormControl>\n\n                    <FormControl className={classes.formControl}>\n                        <TextField type=\"number\"\n                                   id=\"rank\"\n                                   label=\"Rank\"\n                                   value={this.state.rank}\n                                   onChange={event => { this.setState({rank: event.target.value });}}\n                        />\n                        <FormHelperText>What is your rank?</FormHelperText>\n                    </FormControl>\n\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"invested\">Tryhard?</InputLabel>\n                        <Select\n                            labelId=\"invested\"\n                            id=\"invested\"\n                            value={this.state.invested}\n                            onChange={event => { this.setState({invested: event.target.value });}}\n                        >\n                            <MenuItem value={1}>Why? My aim is true.</MenuItem>\n                            <MenuItem value={2}>Sometimes I watch one trick for every hero</MenuItem>\n                            <MenuItem value={3}>Replay, twich & reddit are my friends.</MenuItem>\n                            <MenuItem value={4}>Bruh, I have my personal coach.</MenuItem>\n                        </Select>\n                        <FormHelperText>Do you study your games?</FormHelperText>\n                    </FormControl>\n                </form>\n                <Grid\n                    container\n                    spacing={0}\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    justify=\"center\"\n                >\n\n                    <Grid item xs={12}>\n                        <Paper className={classes.paper} >\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} sm container>\n                                    <Grid item xs container direction=\"column\" spacing={2}>\n                                        <Grid item xs>\n                                            <Typography gutterBottom>\n                                                So, you play this role {this.state.time.toFixed(2)}h each day.\n                                            </Typography>\n                                            <Typography gutterBottom>\n                                                You will reach:\n                                            </Typography>\n                                            {items}\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n\n                </Grid>\n            </Container>\n        );\n    }\n}\n\n\nconst styles = theme => ({\n    paper: {\n        padding: theme.spacing(1),\n        width: 300,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(5),\n    },\n    formControl: {\n        margin: theme.spacing(4),\n    },\n});\n\nwhenGm.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(whenGm);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}